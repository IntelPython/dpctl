name: Conda package

on:
  push:
    branches:
      - master
  pull_request:

env:
  PACKAGE_NAME: dpctl
  MODULE_NAME: dpctl
  VER_SCRIPT1: "import json; f = open('ver.json', 'r'); j = json.load(f); f.close(); "
  VER_SCRIPT2: "d = j['dpctl'][0]; print('='.join((d[s] for s in ('version', 'build'))))"

jobs:
  build_linux:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python: ['3.8', '3.9', '3.10']
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set pkgs_dirs
        run: |
          echo "pkgs_dirs: [~/.conda/pkgs]" >> ~/.condarc
      - name: Cache conda packages
        uses: actions/cache@v3
        env:
          CACHE_NUMBER: 3  # Increase to reset cache
        with:
          path: ~/.conda/pkgs
          key:
            ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-python-${{ matrix.python }}-${{hashFiles('**/meta.yaml') }}
          restore-keys: |
            ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-python-${{ matrix.python }}-
            ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-
      - name: Add conda to system path
        run: echo $CONDA/bin >> $GITHUB_PATH
      - name: Install conda-build
        run: conda install conda-build
      - name: Build conda package
        run: |
          CHANNELS="-c defaults -c intel --override-channels"
          VERSIONS="--python ${{ matrix.python }}"
          TEST="--no-test"
          conda build \
            $TEST \
            $VERSIONS \
            $CHANNELS \
            conda-recipe
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PACKAGE_NAME }} ${{ runner.os }} Python ${{ matrix.python }}
          path: /usr/share/miniconda/conda-bld/linux-64/${{ env.PACKAGE_NAME }}-*.tar.bz2

  build_windows:
    runs-on: windows-latest

    strategy:
      matrix:
        python: ['3.8', '3.9']
    env:
      conda-bld: C:\Miniconda\conda-bld\win-64\
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: conda-incubator/setup-miniconda@v2
        with:
          auto-activate-base: true
          activate-environment: ""

      - name: Cache conda packages
        uses: actions/cache@v3
        env:
          CACHE_NUMBER: 3  # Increase to reset cache
        with:
          path: /home/runner/conda_pkgs_dir
          key:
            ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-python-${{ matrix.python }}-${{hashFiles('**/meta.yaml') }}
          restore-keys: |
            ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-python-${{ matrix.python }}-
            ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-
      - name: Install conda-build
        run: conda install conda-build
      - name: Build conda package
        run: conda build --no-test --python ${{ matrix.python }} -c defaults -c intel --override-channels conda-recipe
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PACKAGE_NAME }} ${{ runner.os }} Python ${{ matrix.python }}
          path: ${{ env.conda-bld }}${{ env.PACKAGE_NAME }}-*.tar.bz2

  test_linux:
    needs: build_linux
    runs-on:  ${{ matrix.runner }}

    strategy:
      matrix:
        python: ['3.8', '3.9', '3.10']
        experimental: [false]
        runner: [ubuntu-latest]
    continue-on-error: ${{ matrix.experimental }}
    env:
      CHANNELS: -c defaults -c intel --override-channels

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.PACKAGE_NAME }} ${{ runner.os }} Python ${{ matrix.python }}
      - name: Add conda to system path
        run: echo $CONDA/bin >> $GITHUB_PATH
      - name: Install conda-build
        # Needed to be able to run conda index
        run: conda install conda-build
      - name: Create conda channel
        run: |
          mkdir -p $GITHUB_WORKSPACE/channel/linux-64
          conda index $GITHUB_WORKSPACE/channel || exit 1
          mv ${PACKAGE_NAME}-*.tar.bz2 $GITHUB_WORKSPACE/channel/linux-64 || exit 1
          conda index $GITHUB_WORKSPACE/channel || exit 1
          # Test channel
          conda search $PACKAGE_NAME -c $GITHUB_WORKSPACE/channel --override-channels --info --json > $GITHUB_WORKSPACE/ver.json
          cat ver.json
      - name: Collect dependencies
        run: |
          CHANNELS="-c $GITHUB_WORKSPACE/channel ${{ env.CHANNELS }}"
          export PACKAGE_VERSION=$(python -c "${VER_SCRIPT1} ${VER_SCRIPT2}")
          conda create -n test_dpctl $PACKAGE_NAME=${PACKAGE_VERSION} python=${{ matrix.python }} $CHANNELS --only-deps --dry-run > lockfile
          cat lockfile
      - name: Set pkgs_dirs
        run: |
          echo "pkgs_dirs: [~/.conda/pkgs]" >> ~/.condarc
      - name: Cache conda packages
        uses: actions/cache@v3
        env:
          CACHE_NUMBER: 3  # Increase to reset cache
        with:
          path: ~/.conda/pkgs
          key:
            ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-python-${{ matrix.python }}-${{hashFiles('lockfile') }}
          restore-keys: |
            ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-python-${{ matrix.python }}-
            ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-
      - name: Install dpctl
        run: |
          CHANNELS="-c $GITHUB_WORKSPACE/channel ${{ env.CHANNELS }}"
          export PACKAGE_VERSION=$(python -c "${VER_SCRIPT1} ${VER_SCRIPT2}")
          conda create -n test_dpctl $PACKAGE_NAME=${PACKAGE_VERSION} pytest python=${{ matrix.python }} $CHANNELS
          # Test installed packages
          conda list
      - name: Smoke test
        run: |
          . $CONDA/etc/profile.d/conda.sh
          conda activate test_dpctl
          export OCL_ICD_FILENAMES=libintelocl.so
          export SYCL_ENABLE_HOST_DEVICE=1
          python -c "import dpctl; dpctl.lsplatform()"
      - name: Run tests
        run: |
          . $CONDA/etc/profile.d/conda.sh
          conda activate test_dpctl
          # echo "libintelocl.so" | tee /etc/OpenCL/vendors/intel-cpu.icd
          export OCL_ICD_FILENAMES=libintelocl.so
          export SYCL_ENABLE_HOST_DEVICE=1
          # clinfo -l
          python -m pytest -p no:faulthandler --pyargs $MODULE_NAME

  test_windows:
    needs: build_windows
    runs-on:  ${{ matrix.runner }}

    strategy:
      matrix:
        python: ['3.8', '3.9']
        experimental: [false]
        runner: [windows-latest]
    continue-on-error: ${{ matrix.experimental }}
    env:
      CHANNELS: -c defaults -c intel --override-channels

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.PACKAGE_NAME }} ${{ runner.os }} Python ${{ matrix.python }}
      - uses: conda-incubator/setup-miniconda@v2
        with:
          auto-activate-base: true
          activate-environment: ""
      - name: Install conda-build
        # Needed to be able to run conda index
        run: conda install conda-build
      - name: Create conda channel
        run: |
          mkdir ${{ env.GITHUB_WORKSPACE }}\channel\win-64
          move ${{ env.PACKAGE_NAME }}-*.tar.bz2 ${{ env.GITHUB_WORKSPACE }}\channel\win-64
          conda index ${{ env.GITHUB_WORKSPACE }}/channel
          # Test channel
          conda search ${{ env.PACKAGE_NAME }} -c ${{ env.GITHUB_WORKSPACE }}/channel --override-channels --info --json > ${{ env.GITHUB_WORKSPACE }}\ver.json
          more ${{ env.GITHUB_WORKSPACE }}\ver.json
      - name: Collect dependencies
        shell: cmd
        run: |
          @ECHO ON
          copy /Y ${{ env.GITHUB_WORKSPACE }}\ver.json .
          set "SCRIPT=%VER_SCRIPT1% %VER_SCRIPT2%"
          FOR /F "tokens=* USEBACKQ" %%F IN (`python -c "%SCRIPT%"`) DO (
             SET PACKAGE_VERSION=%%F
          )
          conda install ${{ env.PACKAGE_NAME }}=%PACKAGE_VERSION% python=${{ matrix.python }} -c ${{ env.GITHUB_WORKSPACE }}/channel ${{ env.CHANNELS }} --only-deps --dry-run > lockfile
          more lockfile
      - name: Cache conda packages
        uses: actions/cache@v3
        env:
          CACHE_NUMBER: 3  # Increase to reset cache
        with:
          path: /home/runner/conda_pkgs_dir
          key:
            ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-python-${{ matrix.python }}-${{hashFiles('lockfile') }}
          restore-keys: |
            ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-python-${{ matrix.python }}-
            ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-
      - name: Install opencl_rt
        run: conda install opencl_rt -c intel --override-channels
      - name: Install dpctl
        shell: cmd
        run: |
          @ECHO ON
          copy /Y ${{ env.GITHUB_WORKSPACE }}\ver.json .
          set "SCRIPT=%VER_SCRIPT1% %VER_SCRIPT2%"
          FOR /F "tokens=* USEBACKQ" %%F IN (`python -c "%SCRIPT%"`) DO (
             SET PACKAGE_VERSION=%%F
          )
          conda install ${{ env.PACKAGE_NAME }}=%PACKAGE_VERSION% pytest python=${{ matrix.python }} -c ${{ env.GITHUB_WORKSPACE }}/channel ${{ env.CHANNELS }}
          # Test installed packages
          conda list
      - name: Add library
        run: |
          echo "OCL_ICD_FILENAMES=C:\Miniconda\Library\lib\intelocl64.dll" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          try {$list = Get-Item -Path HKLM:\SOFTWARE\Khronos\OpenCL\Vendors | Select-Object -ExpandProperty Property } catch {$list=@()}
          if ($list.count -eq 0) {
              if (-not (Test-Path -Path HKLM:\SOFTWARE\Khronos)) {
                 New-Item -Path HKLM:\SOFTWARE\Khronos
              }
              if (-not (Test-Path -Path HKLM:\SOFTWARE\Khronos\OpenCL)) {
                 New-Item -Path HKLM:\SOFTWARE\Khronos\OpenCL
              }
              if (-not (Test-Path -Path HKLM:\SOFTWARE\Khronos\OpenCL\Vendors)) {
                 New-Item -Path HKLM:\SOFTWARE\Khronos\OpenCL\Vendors
              }
              New-ItemProperty -Path HKLM:\SOFTWARE\Khronos\OpenCL\Vendors -Name C:\Miniconda\Library\lib\intelocl64.dll -Value 0
              try {$list = Get-Item -Path HKLM:\SOFTWARE\Khronos\OpenCL\Vendors | Select-Object -ExpandProperty Property } catch {$list=@()}
              Write-Output $(Get-Item -Path HKLM:\SOFTWARE\Khronos\OpenCL\Vendors)
              # Now copy OpenCL.dll into system folder
              $system_ocl_icd_loader="C:\Windows\System32\OpenCL.dll"
              $python_ocl_icd_loader="C:\Miniconda\Library\bin\OpenCL.dll"
              Copy-Item -Path $python_ocl_icd_loader -Destination $system_ocl_icd_loader
              if (Test-Path -Path $system_ocl_icd_loader) {
                 Write-Output "$system_ocl_icd_loader has been copied"
                 $acl = Get-Acl $system_ocl_icd_loader
                 Write-Output $acl
              } else {
                 Write-Output "OCL-ICD-Loader was not copied"
              }
              # Variable assisting OpenCL CPU driver to find TBB DLLs which are not located where it expects them by default
              echo "TBB_DLL_PATH=C:\Miniconda\Library\bin" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          }
      - name: Smoke test
        run: |
          set SYCL_ENABLE_HOST_DEVICE=1
          & { [Environment]::SetEnvironmentVariable("Path", $env:Path + ";C:\Miniconda\Library\bin\", [EnvironmentVariableTarget]::Machine) }
          python -c "import dpctl; dpctl.lsplatform()"
          python -c "import dpctl; print(dpctl.get_devices(backend='opencl', device_type='gpu'))"
          python -c "import dpctl; print(dpctl.get_num_devices(backend='opencl', device_type='gpu'))"
      - name: Run tests
        run: |
          set SYCL_ENABLE_HOST_DEVICE=1
          & { [Environment]::SetEnvironmentVariable("Path", $env:Path + ";C:\Miniconda\Library\bin\", [EnvironmentVariableTarget]::Machine) }
          python -m pytest -p no:faulthandler --pyargs ${{ env.MODULE_NAME }}

  upload_linux:
    needs: test_linux
    if: ${{github.ref == 'refs/heads/master' || (startsWith(github.ref, 'refs/heads/release') == true) || github.event_name == 'push' && contains(github.ref, 'refs/tags/')}}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: ['3.8', '3.9', '3.10']
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.PACKAGE_NAME }} ${{ runner.os }} Python ${{ matrix.python }}

      - name: Install anaconda-client
        run: conda install anaconda-client
      - name: Add conda to system path
        run: echo $CONDA/bin >> $GITHUB_PATH

      - name: Upload
        env:
          ANACONDA_TOKEN: ${{ secrets.ANACONDA_TOKEN }}
        run: |
          conda install anaconda-client
          anaconda --token $ANACONDA_TOKEN upload --user dppy --label dev ${PACKAGE_NAME}-*.tar.bz2

  upload_windows:
    needs: test_windows
    if: ${{github.ref == 'refs/heads/master' || (startsWith(github.ref, 'refs/heads/release') == true) || github.event_name == 'push' && contains(github.ref, 'refs/tags/')}}
    runs-on: windows-latest
    strategy:
      matrix:
        python: ['3.8', '3.9']
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.PACKAGE_NAME }} ${{ runner.os }} Python ${{ matrix.python }}
      - uses: conda-incubator/setup-miniconda@v2
        with:
          auto-activate-base: true
          activate-environment: ""
      - name: Install anaconda-client
        run: conda install anaconda-client

      - name: Upload
        env:
          ANACONDA_TOKEN: ${{ secrets.ANACONDA_TOKEN }}
        run: |
          conda install anaconda-client
          anaconda --token ${{ env.ANACONDA_TOKEN }} upload --user dppy --label dev ${{ env.PACKAGE_NAME }}-*.tar.bz2

  test_examples_linux:
    needs: build_linux
    runs-on:  ${{ matrix.runner }}
    strategy:
      matrix:
        python: ['3.9']
        experimental: [false]
        runner: [ubuntu-latest]
    continue-on-error: ${{ matrix.experimental }}
    env:
      CHANNELS: -c defaults -c intel --override-channels

    steps:
      - name: Install conda-build
        # Needed to be able to run conda index
        run: conda install conda-build python=${{ matrix.python }}
      - name: Checkout dpctl repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.PACKAGE_NAME }} ${{ runner.os }} Python ${{ matrix.python }}
      - name: Add conda to system path
        run: echo $CONDA/bin >> $GITHUB_PATH
      - name: Create conda channel
        run: |
          mkdir -p $GITHUB_WORKSPACE/channel/linux-64
          conda index $GITHUB_WORKSPACE/channel || exit 1
          mv ${PACKAGE_NAME}-*.tar.bz2 $GITHUB_WORKSPACE/channel/linux-64 || exit 1
          conda index $GITHUB_WORKSPACE/channel || exit 1
          # Test channel
          conda search $PACKAGE_NAME -c $GITHUB_WORKSPACE/channel --override-channels --info --json > $GITHUB_WORKSPACE/ver.json
          cat ver.json
      - name: Collect dependencies
        run: |
          CHANNELS="-c $GITHUB_WORKSPACE/channel ${{ env.CHANNELS }}"
          conda install $PACKAGE_NAME python=${{ matrix.python }} $CHANNELS --only-deps --dry-run > lockfile
      - name: Set pkgs_dirs
        run: |
          echo "pkgs_dirs: [~/.conda/pkgs]" >> ~/.condarc
      - name: Cache conda packages
        uses: actions/cache@v3
        env:
          CACHE_NUMBER: 3  # Increase to reset cache
        with:
          path: ~/.conda/pkgs
          key:
            ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-python-${{ matrix.python }}-${{hashFiles('lockfile') }}
          restore-keys: |
            ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-python-${{ matrix.python }}-
            ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-
      - name: Install example requirements
        shell: bash -l {0}
        run: |
          CHANNELS="${{ env.CHANNELS }}"
          . $CONDA/etc/profile.d/conda.sh
          conda create -n examples -y pytest python=${{ matrix.python }} $CHANNELS
          conda install -n examples -y cmake">=3.22" $CHANNELS || exit 1
          conda install -n examples -y ninja $CHANNELS || exit 1
          conda install -n examples -y pybind11 cython scikit-build $CHANNELS || exit 1
          conda install -n examples -y mkl-dpcpp mkl-devel-dpcpp dpcpp_cpp_rt $CHANNELS || exit 1
          conda create -y -n build_env -c intel gcc_linux-64 gxx_linux-64 dpcpp_linux-64
      - name: Install dpctl
        shell: bash -l {0}
        run: |
          source $CONDA/etc/profile.d/conda.sh
          CHANNELS="-c $GITHUB_WORKSPACE/channel -c dppy/label/dev -c intel -c defaults --override-channels"
          export PACKAGE_VERSION=$(python -c "${VER_SCRIPT1} ${VER_SCRIPT2}")
          conda install -n examples -y ${CHANNELS} dpctl=${PACKAGE_VERSION} dpnp">=0.10.1" || exit 1
      - name: Build and run examples with native extensions
        shell: bash -l {0}
        run: |
          source $CONDA/etc/profile.d/conda.sh
          export OCL_ICD_FILENAMES=libintelocl.so
          export SYCL_ENABLE_HOST_DEVICE=1
          conda activate examples
          conda list
          cd examples/pybind11
          for d in $(ls)
          do
            pushd $d
            export MKLROOT=${CONDA_PREFIX}
            export TBBROOT=${CONDA_PREFIX}
            conda activate --stack build_env
            if [ -e CMakeLists.txt ]
            then
               CC=icx CXX=icpx python setup.py build_ext --inplace -G Ninja -- \
                    -DTBB_LIBRARY_DIR=${TBBROOT}/lib \
                    -DMKL_LIBRARY_DIR=${MKLROOT}/lib \
                    -DMKL_INCLUDE_DIR=${MKLROOT}/include \
                    -DTBB_INCLUDE_DIR=${TBBROOT}/include || exit 1
            else
               CC=dpcpp CXX=dpcpp LDSHARED="dpcpp -shared" \
                    python setup.py build_ext --inplace || exit 1
            fi
            conda deactivate
            if [ -e tests ]
            then
               LD_LIBRARY_PATH=${CONDA_PREFIX}/lib python -m pytest tests || exit 1
            else
               LD_LIBRARY_PATH=${CONDA_PREFIX}/lib python example.py || exit 1
            fi
            popd
          done
          cd ../cython
          for d in $(ls)
          do
            pushd $d
            conda activate --stack build_env
            CC=dpcpp CXX=dpcpp LDSHARED="dpcpp -shared" \
                   python setup.py build_ext --inplace || exit 1
            conda deactivate
            LD_LIBRARY_PATH=${CONDA_PREFIX}/lib python run.py || exit 1
            popd
          done
          cd ../c
          for d in $(ls)
          do
            pushd $d
            conda activate --stack build_env
            python setup.py build_ext --inplace || exit 1
            conda deactivate
            python -m pytest tests || exit 1
            popd
          done
      - name: Run Python examples
        shell: bash -l {0}
        run: |
          cd examples/python
          source $CONDA/etc/profile.d/conda.sh
          export OCL_ICD_FILENAMES=libintelocl.so
          export SYCL_ENABLE_HOST_DEVICE=1
          conda activate examples
          for script in $(find . \( -not -name "_*" -and -name "*.py" \))
          do
            echo "Executing ${script}"
            python ${script} || exit 1
          done
