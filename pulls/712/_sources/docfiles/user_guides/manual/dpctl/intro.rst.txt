.. _intro:

dpctl
-----

The Data Parallel Control (dpctl) package enables Python application developers
and extension developers to access a data-parallel computing resource or XPU
available on a modern heterogeneous system. The "X" in XPU can stand for
a diverse range of compute architectures such as a CPU, GPU, FPGA, *etc.*, and
can be tailored to the needs of an application. Dpctl's objective is to provide
a Python runtime to control an XPU from any Python application or library,
alleviating the need for other Python packages to develop such a runtime
themselves. The runtime is built on top of the C++ SYCL standard and is
envisioned to be both vendor and architecture agnostic. If the underlying SYCL
runtime supports a type of architecture, the dpctl runtime will allow managing
that architecture from Python.

In its current form, dpctl relies on certain DPC++ extensions of SYCL standard.
Moreover, the binary distribution of dpctl uses the proprietary Intel(R) oneAPI
DPC++ runtime bundled as part of oneAPI and supports Intel XPU devices only.
However, dpctl is compatible with the runtime of open-source DPC++ SYCL bundle
that can be compiled to support a wide range of architectures including CUDA,
AMD ROC, and HIP.

The user guide introduces the core features of dpctl and the underlying
concepts. The guide is meant primarily for users of the Python package. Library
and native extension developers should refer to the programmer's guide.

Table of contents
+++++++++++++++++

.. toctree::
    :maxdepth: 2

    basic_concepts
    device_selection
    platforms
    devices

.. include:: ../../../urls.rst
