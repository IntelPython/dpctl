.. _user_manual_intro:

Introduction
------------

The Data Parallel Control (dpctl) package enables Python application developers
and extension developers to access a data-parallel computing resource or XPU
available on a modern heterogeneous system. The "X" in XPU can stand for
a diverse range of compute architectures such as a CPU, GPU, FPGA, *etc.*, and
can be tailored to the needs of an application. Dpctl's objective is to provide
a Python runtime to control or to manage an XPU from any Python application or
library, without the need for other Python packages to develop such a runtime
themselves. The runtime is built on top of the C++ SYCL standard and is
envisioned to be both vendor and architecture agnostic. If the underlying SYCL
runtime supports a type of architecture, the dpctl runtime will allow managing
that architecture from Python.

In its current form, dpctl relies on certain DPC++ extensions of SYCL standard.
Moreover, the binary distribution of dpctl uses the proprietary Intel(R) oneAPI
DPC++ runtime bundled as part of oneAPI and supports Intel XPU devices only.
However, dpctl is compatible with the runtime of open-source DPC++ SYCL bundle
that can be compiled to support a wide range of architectures including CUDA,
AMD ROC, and HIP.

The user guide introduces the core features of dpctl and the underlying
concepts. The guide is meant primarily for users of the Python package. Library
and native extension developers should refer to the programmer's guide.

Basic Concepts
--------------

Although dpctl is based on SYCL and shares the same basic concepts, users of
dpctl need not have any prior experience with SYCL. This section recaps the most
important basic concepts. Readers should refer to a more topical SYCL reference
such as the `SYCL 2020 spec`_ for more details.

* **Heterogeneous computing**
    Refers to using multiple devices in a program.

* **Host**
    Every program starts by running on a host, and most of the lines of code in
    a program, in particular lines of code implementing the Python interpreter
    itself, are usually for the host. Hosts are customarily CPUs.

* **Device**
    A device is an XPU connected to a host that is programmable with a specific
    device driver. Different types of devices can have different architectures
    (CPUs, GPUs, FPGA, ASICs, DSP), but are programmable using the same
    `oneAPI`_  programming model.

* **Platform**
    A device driver installed on the system is termed as a platform. As multiple
    devices of the same type can share the same device driver, a platform may
    contain multiple devices. Note that the same physical hardware (say, a GPU)
    may be reflected as two separate devices if they can be programmed by more
    than one platform, *e.g.*, the same GPU hardware can be listed as an
    OpenCL GPU device and a Level-Zero GPU device.

* **Context**
   A context holds the run-time information needed to operate on a device or a
   group of devices.

* **Queue**
   A queue is needed to execute any computation on a device.

* **Event**
   *Needs updating*

* **USM**
   *Needs updating*

.. todo::

    #. Introduce the basic concepts of Platforms, Devices, Contexts, Queues,
       Events, and USM.
    #. Introduce common terms: XPU, host.
    #. Add citations/references

.. Go over dpctl and dpctl tensor

.. include:: ../../urls.rst
