.. _dpctl_pyapi:

#####
dpctl
#####

.. currentmodule:: dpctl

.. automodule:: dpctl


Sub-modules
-----------

.. toctree::
   :hidden:

   dpctl.memory_pyapi
   dpctl.program_pyapi
   dpctl.tensor_pyapi
   dpctl.utils_pyapi

.. list-table::
    :widths: 25,50

    * - :ref:`dpctl.memory_pyapi`
      - **Data Parallel Control Memory** provides Python objects for untyped USM memory container of bytes for each kind of USM pointers: shared pointers, device pointers and host pointers.
    * - :ref:`dpctl.program_pyapi`
      - **Data Parallel Control Program** provides a way to create a SYCL kernel from either an OpenCL program represented as a string or a SPIR-V binary file.
    * - :ref:`dpctl.tensor_pyapi`
      - **Data Parallel Tensor Collection** is a collection of tensor implementations that implement Python data API (https://data-apis.github.io/array-api/latest/) standard.
    * - :ref:`dpctl.utils_pyapi`
      - A collection of utility functions.


.. _dpctl_classes:

Classes
-------

.. toctree::
   :hidden:

   SyclContext
   SyclDevice
   SyclEvent
   SyclPlatform
   SyclQueue
   SyclTimer

.. list-table::
    :widths: 25,50

    * - :class:`SyclContext`
      - A Python wrapper for the :sycl_context:`sycl::context <>` C++ class.
    * - :class:`SyclDevice`
      - A Python wrapper for the :sycl_device:`sycl::device <>` C++ class.
    * - :class:`SyclEvent`
      - Python class representing ``cl::sycl::event``. There are multiple ways to create a :class:`dpctl.SyclEvent` object: - Invoking the constructor with no arguments creates a ready event using the default constructor of the ``cl::sycl::event``.
    * - :class:`SyclPlatform`
      - Python class representing ``cl::sycl::platform`` class.
    * - :class:`SyclQueue`
      - Python class representing ``cl::sycl::queue``. There are multiple ways to create a :class:`dpctl.SyclQueue` object: - Invoking the constructor with no arguments creates a context using the default selector.
    * - :class:`SyclTimer`
      - Python class to measure device time of execution of commands submitted to :class:`dpctl.SyclQueue` as well as the wall-time.


.. _dpctl_queue_management_functions:

Queue Management Functions
--------------------------

.. list-table::
    :widths: 25,50

    * - :func:`device_context()`
      - Yields a SYCL queue corresponding to the input queue object, device object, or device filter selector string.
    * - :func:`get_current_backend()`
      - Returns the backend for the current queue as a `backend_type` enum.
    * - :func:`get_current_device_type()`
      - Returns current device type as a `device_type` enum.
    * - :func:`get_current_queue()`
      - Returns the currently activate SYCL queue as a new SyclQueue object.

.. _dpctl_device_selection_functions:

Device Selection Functions
--------------------------

.. list-table::
    :widths: 25,50

    * - :func:`select_accelerator_device()`
      - A wrapper for SYCL's ``accelerator_selector`` class.
    * - :func:`select_cpu_device()`
      - A wrapper for SYCL's ``cpu_selector`` class.
    * - :func:`select_default_device()`
      - A wrapper for SYCL's ``default_selector`` class.
    * - :func:`select_device_with_aspects()`
      - Selects the root :class:`dpctl.SyclDevice` that has the highest default selector score among devices that have all aspects in the `required_aspects` list, and do not have any aspects in `excluded_aspects` list.
    * - :func:`select_gpu_device()`
      - A wrapper for SYCL's ``gpu_selector`` class.
    * - :func:`select_host_device()`
      - A wrapper for SYCL's ``host_selector`` class.

.. _dpctl_other_functions:

Other Functions
---------------

.. list-table::
    :widths: 25,50

    * - :func:`get_devices()`
      - Returns a list of :class:`dpctl.SyclDevice` instances selected based on the given :class:`dpctl.device_type` and :class:`dpctl.backend_type` values.
    * - :func:`get_include()`
      - Return the directory that contains the dpctl \*.h header files.
    * - :func:`get_num_activated_queues()`
      - Returns the number of currently activated queues for this thread.
    * - :func:`get_num_devices()`
      - A helper function to return the number of SYCL devices of a given :class:`dpctl.device_type` and :class:`dpctl.backend_type`.
    * - :func:`get_platforms()`
      - Returns a list of all available SYCL platforms on the system.
    * - :func:`has_accelerator_devices()`
      - A helper function to check if there are any SYCL Accelerator devices available.
    * - :func:`has_cpu_devices()`
      - A helper function to check if there are any SYCL CPU devices available.
    * - :func:`has_gpu_devices()`
      - A helper function to check if there are any SYCL GPU devices available.
    * - :func:`has_host_device()`
      - A helper function to check if there are any SYCL Host devices available.
    * - :func:`is_in_device_context()`
      - Checks if the control is inside a :func:`dpctl.device_context()` scope.
    * - :func:`lsplatform()`
      - Prints out the list of available SYCL platforms, and optionally extra metadata about each platform.
    * - :func:`set_global_queue()`
      - Sets the global queue to the SYCL queue specified explicitly, or created from given arguments.


Enums
-----

.. list-table::
    :widths: 25,50

    * - :class:`backend_type`
      - An enumeration of supported SYCL backends.
    * - :class:`device_type`
      - An enumeration of supported SYCL device types.
    * - :class:`event_status_type`
      - An enumeration of SYCL event states.


Exceptions
----------

.. list-table::
    :widths: 25,50

    * - :class:`SyclKernelInvalidRangeError`
      - A SyclKernelInvalidRangeError is raised when the provided range has less than one or more than three dimensions.
    * - :class:`SyclKernelSubmitError`
      - A SyclKernelSubmitError exception is raised when the provided :class:`.SyclKernel` could not be submitted to the :class:`.SyclQueue`.
    * - :class:`SyclQueueCreationError`
      - A SyclQueueCreationError exception is raised when a :class:`.SyclQueue` could not be created. :class:`.SyclQueue` creation can fail if the filter string is invalid, or the backend or device type values are not supported.


