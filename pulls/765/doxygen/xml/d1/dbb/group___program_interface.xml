<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="d1/dbb/group___program_interface" kind="group">
    <compoundname>ProgramInterface</compoundname>
    <title>Program class C wrapper</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="d1/dbb/group___program_interface_1gae1f8caf6c9bb8d8683b3717f63e56ae7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DPCTL_API __dpctl_give <ref refid="df/d57/dpctl__sycl__types_8h_1a665a90816ae3328f517ba19c70e4b172" kindref="member">DPCTLSyclProgramRef</ref></type>
        <definition>DPCTL_API __dpctl_give DPCTLSyclProgramRef DPCTLProgram_CreateFromOCLSource</definition>
        <argsstring>(__dpctl_keep const DPCTLSyclContextRef Ctx, __dpctl_keep const char *Source, __dpctl_keep const char *CompileOpts)</argsstring>
        <name>DPCTLProgram_CreateFromOCLSource</name>
        <param>
          <type>__dpctl_keep const <ref refid="df/d57/dpctl__sycl__types_8h_1accf78808322af80b73da617cb2f15f08" kindref="member">DPCTLSyclContextRef</ref></type>
          <declname>Ctx</declname>
        </param>
        <param>
          <type>__dpctl_keep const char *</type>
          <declname>Source</declname>
        </param>
        <param>
          <type>__dpctl_keep const char *</type>
          <declname>CompileOpts</declname>
        </param>
        <briefdescription>
<para>Create a Sycl program from an OpenCL kernel source string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>An opaque pointer to a sycl::context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Source</parametername>
</parameternamelist>
<parameterdescription>
<para>OpenCL source string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>CompileOpts</parametername>
</parameternamelist>
<parameterdescription>
<para>Extra compiler flags (refer Sycl spec.) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new SyclProgramRef pointer if the program creation succeeded, else returns NULL. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/dpctl/dpctl/libsyclinterface/include/dpctl_sycl_program_interface.h" line="81" column="1" declfile="/home/runner/work/dpctl/dpctl/libsyclinterface/include/dpctl_sycl_program_interface.h" declline="81" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d1/dbb/group___program_interface_1gade20300fcd7d69bdb6ae7cad54ee0f78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DPCTL_API __dpctl_give <ref refid="df/d57/dpctl__sycl__types_8h_1a665a90816ae3328f517ba19c70e4b172" kindref="member">DPCTLSyclProgramRef</ref></type>
        <definition>DPCTL_API __dpctl_give DPCTLSyclProgramRef DPCTLProgram_CreateFromSpirv</definition>
        <argsstring>(__dpctl_keep const DPCTLSyclContextRef Ctx, __dpctl_keep const void *IL, size_t Length, const char *CompileOpts)</argsstring>
        <name>DPCTLProgram_CreateFromSpirv</name>
        <param>
          <type>__dpctl_keep const <ref refid="df/d57/dpctl__sycl__types_8h_1accf78808322af80b73da617cb2f15f08" kindref="member">DPCTLSyclContextRef</ref></type>
          <declname>Ctx</declname>
        </param>
        <param>
          <type>__dpctl_keep const void *</type>
          <declname>IL</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>Length</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>CompileOpts</declname>
        </param>
        <briefdescription>
<para>Create a Sycl program from an OpenCL SPIR-V binary file. </para>
        </briefdescription>
        <detaileddescription>
<para>Sycl 1.2 does not expose any method to create a sycl::program from a SPIR-V IL file. To get around this limitation, we first creare a SYCL interoperability program and then create a SYCL program from the interoperability program. Currently, interoperability programs can be created for OpenCL and Level-0 backends.</para>
<para>The feature to create a Sycl kernel from a SPIR-V IL binary will be available in Sycl 2.0 at which point this function may become deprecated.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>An opaque pointer to a sycl::context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IL</parametername>
</parameternamelist>
<parameterdescription>
<para>SPIR-V binary </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Length</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the IL binary in bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>CompileOpts</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional compiler flags used when compiling the SPIR-V binary. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new SyclProgramRef pointer if the program creation succeeded, else returns NULL. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/dpctl/dpctl/libsyclinterface/include/dpctl_sycl_program_interface.h" line="64" column="1" declfile="/home/runner/work/dpctl/dpctl/libsyclinterface/include/dpctl_sycl_program_interface.h" declline="64" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d1/dbb/group___program_interface_1ga29760f4984675c264bbdf11b92b89c08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DPCTL_API void</type>
        <definition>DPCTL_API void DPCTLProgram_Delete</definition>
        <argsstring>(__dpctl_take DPCTLSyclProgramRef PRef)</argsstring>
        <name>DPCTLProgram_Delete</name>
        <param>
          <type>__dpctl_take <ref refid="df/d57/dpctl__sycl__types_8h_1a665a90816ae3328f517ba19c70e4b172" kindref="member">DPCTLSyclProgramRef</ref></type>
          <declname>PRef</declname>
        </param>
        <briefdescription>
<para>Frees the DPCTLSyclProgramRef pointer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>PRef</parametername>
</parameternamelist>
<parameterdescription>
<para>Opaque pointer to a sycl::program </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/dpctl/dpctl/libsyclinterface/include/dpctl_sycl_program_interface.h" line="119" column="6" declfile="/home/runner/work/dpctl/dpctl/libsyclinterface/include/dpctl_sycl_program_interface.h" declline="119" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d1/dbb/group___program_interface_1ga86fcd9c7af5bc38a056e237c89b3fa9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DPCTL_API __dpctl_give <ref refid="df/d57/dpctl__sycl__types_8h_1a3f6be07fdf695c015719ce0b0c237844" kindref="member">DPCTLSyclKernelRef</ref></type>
        <definition>DPCTL_API __dpctl_give DPCTLSyclKernelRef DPCTLProgram_GetKernel</definition>
        <argsstring>(__dpctl_keep DPCTLSyclProgramRef PRef, __dpctl_keep const char *KernelName)</argsstring>
        <name>DPCTLProgram_GetKernel</name>
        <param>
          <type>__dpctl_keep <ref refid="df/d57/dpctl__sycl__types_8h_1a665a90816ae3328f517ba19c70e4b172" kindref="member">DPCTLSyclProgramRef</ref></type>
          <declname>PRef</declname>
        </param>
        <param>
          <type>__dpctl_keep const char *</type>
          <declname>KernelName</declname>
        </param>
        <briefdescription>
<para>Returns the SyclKernel with given name from the program, if not found then return NULL. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>PRef</parametername>
</parameternamelist>
<parameterdescription>
<para>Opaque pointer to a sycl::program </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>KernelName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of kernel </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A SyclKernel reference if the kernel exists, else NULL </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/dpctl/dpctl/libsyclinterface/include/dpctl_sycl_program_interface.h" line="96" column="1" declfile="/home/runner/work/dpctl/dpctl/libsyclinterface/include/dpctl_sycl_program_interface.h" declline="96" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d1/dbb/group___program_interface_1ga9c266676f09dd0ed681adfe2d6b1ff06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DPCTL_API bool</type>
        <definition>DPCTL_API bool DPCTLProgram_HasKernel</definition>
        <argsstring>(__dpctl_keep DPCTLSyclProgramRef PRef, __dpctl_keep const char *KernelName)</argsstring>
        <name>DPCTLProgram_HasKernel</name>
        <param>
          <type>__dpctl_keep <ref refid="df/d57/dpctl__sycl__types_8h_1a665a90816ae3328f517ba19c70e4b172" kindref="member">DPCTLSyclProgramRef</ref></type>
          <declname>PRef</declname>
        </param>
        <param>
          <type>__dpctl_keep const char *</type>
          <declname>KernelName</declname>
        </param>
        <briefdescription>
<para>Return True if a SyclKernel with given name exists in the program, if not found then returns False. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>PRef</parametername>
</parameternamelist>
<parameterdescription>
<para>Opaque pointer to a sycl::program </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>KernelName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of kernel </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the kernel exists, else False </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/dpctl/dpctl/libsyclinterface/include/dpctl_sycl_program_interface.h" line="109" column="6" declfile="/home/runner/work/dpctl/dpctl/libsyclinterface/include/dpctl_sycl_program_interface.h" declline="109" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
