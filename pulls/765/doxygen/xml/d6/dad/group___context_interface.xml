<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="d6/dad/group___context_interface" kind="group">
    <compoundname>ContextInterface</compoundname>
    <title>Context class C wrapper</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="d6/dad/group___context_interface_1gaa6938cd391c1cea91998fae97ba05141" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DPCTL_API bool</type>
        <definition>DPCTL_API bool DPCTLContext_AreEq</definition>
        <argsstring>(__dpctl_keep const DPCTLSyclContextRef CtxRef1, __dpctl_keep const DPCTLSyclContextRef CtxRef2)</argsstring>
        <name>DPCTLContext_AreEq</name>
        <param>
          <type>__dpctl_keep const <ref refid="df/d57/dpctl__sycl__types_8h_1accf78808322af80b73da617cb2f15f08" kindref="member">DPCTLSyclContextRef</ref></type>
          <declname>CtxRef1</declname>
        </param>
        <param>
          <type>__dpctl_keep const <ref refid="df/d57/dpctl__sycl__types_8h_1accf78808322af80b73da617cb2f15f08" kindref="member">DPCTLSyclContextRef</ref></type>
          <declname>CtxRef2</declname>
        </param>
        <briefdescription>
<para>Checks if two DPCTLSyclContextRef objects point to the same sycl::context. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>CtxRef1</parametername>
</parameternamelist>
<parameterdescription>
<para>First opaque pointer to the sycl context. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>CtxRef2</parametername>
</parameternamelist>
<parameterdescription>
<para>Second opaque pointer to the sycl context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the underlying sycl::context are same, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/dpctl/dpctl/libsyclinterface/include/dpctl_sycl_context_interface.h" line="95" column="6" declfile="/home/runner/work/dpctl/dpctl/libsyclinterface/include/dpctl_sycl_context_interface.h" declline="95" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d6/dad/group___context_interface_1ga2e2a05150e669d9950155c4884d1b12e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DPCTL_API __dpctl_give <ref refid="df/d57/dpctl__sycl__types_8h_1accf78808322af80b73da617cb2f15f08" kindref="member">DPCTLSyclContextRef</ref></type>
        <definition>DPCTL_API __dpctl_give DPCTLSyclContextRef DPCTLContext_Copy</definition>
        <argsstring>(__dpctl_keep const DPCTLSyclContextRef CRef)</argsstring>
        <name>DPCTLContext_Copy</name>
        <param>
          <type>__dpctl_keep const <ref refid="df/d57/dpctl__sycl__types_8h_1accf78808322af80b73da617cb2f15f08" kindref="member">DPCTLSyclContextRef</ref></type>
          <declname>CRef</declname>
        </param>
        <briefdescription>
<para>Returns a copy of the DPCTLSyclContextRef object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>CRef</parametername>
</parameternamelist>
<parameterdescription>
<para>DPCTLSyclContextRef object to be copied. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new DPCTLSyclContextRef created by copying the passed in DPCTLSyclContextRef object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/dpctl/dpctl/libsyclinterface/include/dpctl_sycl_context_interface.h" line="108" column="1" declfile="/home/runner/work/dpctl/dpctl/libsyclinterface/include/dpctl_sycl_context_interface.h" declline="108" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d6/dad/group___context_interface_1gacf091019310a589c547dfe0d1e6f5972" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DPCTL_API __dpctl_give <ref refid="df/d57/dpctl__sycl__types_8h_1accf78808322af80b73da617cb2f15f08" kindref="member">DPCTLSyclContextRef</ref></type>
        <definition>DPCTL_API __dpctl_give DPCTLSyclContextRef DPCTLContext_Create</definition>
        <argsstring>(__dpctl_keep const DPCTLSyclDeviceRef DRef, error_handler_callback *handler, int properties)</argsstring>
        <name>DPCTLContext_Create</name>
        <param>
          <type>__dpctl_keep const <ref refid="df/d57/dpctl__sycl__types_8h_1a8dae76b436012ecbdebbd568e77f440d" kindref="member">DPCTLSyclDeviceRef</ref></type>
          <declname>DRef</declname>
        </param>
        <param>
          <type><ref refid="de/d75/dpctl__error__handler__type_8h_1aeb0f262687ced57ead8f8b7d0b7dcefe" kindref="member">error_handler_callback</ref> *</type>
          <declname>handler</declname>
        </param>
        <param>
          <type>int</type>
          <declname>properties</declname>
        </param>
        <briefdescription>
<para>Constructs a new SYCL context for the given SYCL device using the optional async error handler and properties bit flags. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>DRef</parametername>
</parameternamelist>
<parameterdescription>
<para>Opaque pointer to a SYCL device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>A callback function that will be invoked by the async_handler used during context creation. Can be NULL if no async_handler is needed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>properties</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional combination of bit flags to define context properties. Currently, dpctl does not use this argument. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new opaque pointer wrapping a SYCL context. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/dpctl/dpctl/libsyclinterface/include/dpctl_sycl_context_interface.h" line="60" column="1" declfile="/home/runner/work/dpctl/dpctl/libsyclinterface/include/dpctl_sycl_context_interface.h" declline="60" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d6/dad/group___context_interface_1ga2017c4e49a0c88ef7fa8e3195eb685b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DPCTL_API __dpctl_give <ref refid="df/d57/dpctl__sycl__types_8h_1accf78808322af80b73da617cb2f15f08" kindref="member">DPCTLSyclContextRef</ref></type>
        <definition>DPCTL_API __dpctl_give DPCTLSyclContextRef DPCTLContext_CreateFromDevices</definition>
        <argsstring>(__dpctl_keep const DPCTLDeviceVectorRef DVRef, error_handler_callback *handler, int properties)</argsstring>
        <name>DPCTLContext_CreateFromDevices</name>
        <param>
          <type>__dpctl_keep const <ref refid="dc/ddc/group___device_manager_1ga69ba4893acc931f2040cba37863a188e" kindref="member">DPCTLDeviceVectorRef</ref></type>
          <declname>DVRef</declname>
        </param>
        <param>
          <type><ref refid="de/d75/dpctl__error__handler__type_8h_1aeb0f262687ced57ead8f8b7d0b7dcefe" kindref="member">error_handler_callback</ref> *</type>
          <declname>handler</declname>
        </param>
        <param>
          <type>int</type>
          <declname>properties</declname>
        </param>
        <briefdescription>
<para>Constructs a new SYCL context for the given vector of SYCL devices using the optional async error handler and properties bit flags. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>DVRef</parametername>
</parameternamelist>
<parameterdescription>
<para>An opaque pointer to a std::vector of DPCTLSyclDeviceRef opaque pointers. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>A callback function that will be invoked by the async_handler used during context creation. Can be NULL if no async_handler is needed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>properties</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional combination of bit flags to define context properties. Currently, dpctl does not use this argument. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new opaque pointer wrapping a SYCL context. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/dpctl/dpctl/libsyclinterface/include/dpctl_sycl_context_interface.h" line="81" column="1" declfile="/home/runner/work/dpctl/dpctl/libsyclinterface/include/dpctl_sycl_context_interface.h" declline="81" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d6/dad/group___context_interface_1ga12d2a8bc191c360fe67eae5e1fc78c63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DPCTL_API void</type>
        <definition>DPCTL_API void DPCTLContext_Delete</definition>
        <argsstring>(__dpctl_take DPCTLSyclContextRef CtxRef)</argsstring>
        <name>DPCTLContext_Delete</name>
        <param>
          <type>__dpctl_take <ref refid="df/d57/dpctl__sycl__types_8h_1accf78808322af80b73da617cb2f15f08" kindref="member">DPCTLSyclContextRef</ref></type>
          <declname>CtxRef</declname>
        </param>
        <briefdescription>
<para>Delete the pointer after casting it to sycl::context. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>CtxRef</parametername>
</parameternamelist>
<parameterdescription>
<para>The DPCTLSyclContextRef pointer to be deleted. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/dpctl/dpctl/libsyclinterface/include/dpctl_sycl_context_interface.h" line="162" column="6" declfile="/home/runner/work/dpctl/dpctl/libsyclinterface/include/dpctl_sycl_context_interface.h" declline="162" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d6/dad/group___context_interface_1ga835a44d29be8de2b0b6bf4ccb09578be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DPCTL_API size_t</type>
        <definition>DPCTL_API size_t DPCTLContext_DeviceCount</definition>
        <argsstring>(__dpctl_keep const DPCTLSyclContextRef CRef)</argsstring>
        <name>DPCTLContext_DeviceCount</name>
        <param>
          <type>__dpctl_keep const <ref refid="df/d57/dpctl__sycl__types_8h_1accf78808322af80b73da617cb2f15f08" kindref="member">DPCTLSyclContextRef</ref></type>
          <declname>CRef</declname>
        </param>
        <briefdescription>
<para>Returns the number of devices associated with sycl::context referenced by DPCTLSyclContextRef object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>CRef</parametername>
</parameternamelist>
<parameterdescription>
<para>DPCTLSyclContexRef object to query. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A positive count on success or zero on error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/dpctl/dpctl/libsyclinterface/include/dpctl_sycl_context_interface.h" line="119" column="8" declfile="/home/runner/work/dpctl/dpctl/libsyclinterface/include/dpctl_sycl_context_interface.h" declline="119" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d6/dad/group___context_interface_1gaa6a2b2cf4f898df8824da1b52ba9ceb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DPCTL_API <ref refid="d3/d94/dpctl__sycl__enum__types_8h_1aa217d239d7e3752c49bd9fd42c71c933" kindref="member">DPCTLSyclBackendType</ref></type>
        <definition>DPCTL_API DPCTLSyclBackendType DPCTLContext_GetBackend</definition>
        <argsstring>(__dpctl_keep const DPCTLSyclContextRef CtxRef)</argsstring>
        <name>DPCTLContext_GetBackend</name>
        <param>
          <type>__dpctl_keep const <ref refid="df/d57/dpctl__sycl__types_8h_1accf78808322af80b73da617cb2f15f08" kindref="member">DPCTLSyclContextRef</ref></type>
          <declname>CtxRef</declname>
        </param>
        <briefdescription>
<para>Returns the sycl backend for the DPCTLSyclContextRef pointer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>CtxRef</parametername>
</parameternamelist>
<parameterdescription>
<para>An opaque pointer to a sycl::context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The sycl backend for the DPCTLSyclContextRef returned as a DPCTLSyclBackendType enum type. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/dpctl/dpctl/libsyclinterface/include/dpctl_sycl_context_interface.h" line="153" column="1" declfile="/home/runner/work/dpctl/dpctl/libsyclinterface/include/dpctl_sycl_context_interface.h" declline="153" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d6/dad/group___context_interface_1gaba52414ec6b07a3a3364f7a5a2c72b13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DPCTL_API __dpctl_give <ref refid="dc/ddc/group___device_manager_1ga69ba4893acc931f2040cba37863a188e" kindref="member">DPCTLDeviceVectorRef</ref></type>
        <definition>DPCTL_API __dpctl_give DPCTLDeviceVectorRef DPCTLContext_GetDevices</definition>
        <argsstring>(__dpctl_keep const DPCTLSyclContextRef CRef)</argsstring>
        <name>DPCTLContext_GetDevices</name>
        <param>
          <type>__dpctl_keep const <ref refid="df/d57/dpctl__sycl__types_8h_1accf78808322af80b73da617cb2f15f08" kindref="member">DPCTLSyclContextRef</ref></type>
          <declname>CRef</declname>
        </param>
        <briefdescription>
<para>Returns a vector of devices associated with sycl::context referenced by DPCTLSyclContextRef object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>CRef</parametername>
</parameternamelist>
<parameterdescription>
<para>DPCTLSyclContexRef object to query. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A DPCTLDeviceVectorRef with devices associated with given CRef. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/dpctl/dpctl/libsyclinterface/include/dpctl_sycl_context_interface.h" line="131" column="1" declfile="/home/runner/work/dpctl/dpctl/libsyclinterface/include/dpctl_sycl_context_interface.h" declline="131" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d6/dad/group___context_interface_1ga8bf9355c979e31f4714a0c2208f1ed14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DPCTL_API size_t</type>
        <definition>DPCTL_API size_t DPCTLContext_Hash</definition>
        <argsstring>(__dpctl_take DPCTLSyclContextRef CtxRef)</argsstring>
        <name>DPCTLContext_Hash</name>
        <param>
          <type>__dpctl_take <ref refid="df/d57/dpctl__sycl__types_8h_1accf78808322af80b73da617cb2f15f08" kindref="member">DPCTLSyclContextRef</ref></type>
          <declname>CtxRef</declname>
        </param>
        <briefdescription>
<para>Wrapper over std::hash&lt;sycl::context&gt;&apos;s operator() </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>CtxRef</parametername>
</parameternamelist>
<parameterdescription>
<para>The DPCTLSyclContextRef pointer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Hash value of the underlying <computeroutput>sycl::context</computeroutput> instance. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/dpctl/dpctl/libsyclinterface/include/dpctl_sycl_context_interface.h" line="172" column="8" declfile="/home/runner/work/dpctl/dpctl/libsyclinterface/include/dpctl_sycl_context_interface.h" declline="172" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d6/dad/group___context_interface_1ga24db0f38d9acb63c50c686f848b21a53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DPCTL_API bool</type>
        <definition>DPCTL_API bool DPCTLContext_IsHost</definition>
        <argsstring>(__dpctl_keep const DPCTLSyclContextRef CtxRef)</argsstring>
        <name>DPCTLContext_IsHost</name>
        <param>
          <type>__dpctl_keep const <ref refid="df/d57/dpctl__sycl__types_8h_1accf78808322af80b73da617cb2f15f08" kindref="member">DPCTLSyclContextRef</ref></type>
          <declname>CtxRef</declname>
        </param>
        <briefdescription>
<para>Returns true if this SYCL context is a host context. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>CtxRef</parametername>
</parameternamelist>
<parameterdescription>
<para>An opaque pointer to a sycl::context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the SYCL context is a host context, else False. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/dpctl/dpctl/libsyclinterface/include/dpctl_sycl_context_interface.h" line="141" column="6" declfile="/home/runner/work/dpctl/dpctl/libsyclinterface/include/dpctl_sycl_context_interface.h" declline="141" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
