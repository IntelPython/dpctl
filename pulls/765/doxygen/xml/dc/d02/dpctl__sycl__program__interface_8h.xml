<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="dc/d02/dpctl__sycl__program__interface_8h" kind="file" language="C++">
    <compoundname>dpctl_sycl_program_interface.h</compoundname>
    <includes local="yes">Support/DllExport.h</includes>
    <includes local="yes">Support/ExternC.h</includes>
    <includes local="yes">Support/MemOwnershipAttrs.h</includes>
    <includes local="yes">dpctl_data_types.h</includes>
    <includes refid="df/d57/dpctl__sycl__types_8h" local="yes">dpctl_sycl_types.h</includes>
    <incdepgraph>
      <node id="1">
        <label>dpctl_sycl_program_interface.h</label>
        <link refid="dc/d02/dpctl__sycl__program__interface_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>Support/MemOwnershipAttrs.h</label>
      </node>
      <node id="2">
        <label>Support/DllExport.h</label>
      </node>
      <node id="6">
        <label>dpctl_sycl_types.h</label>
        <link refid="df/d57/dpctl__sycl__types_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>Support/ExternC.h</label>
      </node>
      <node id="5">
        <label>dpctl_data_types.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="d1/dbb/group___program_interface_1gae1f8caf6c9bb8d8683b3717f63e56ae7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DPCTL_API __dpctl_give <ref refid="df/d57/dpctl__sycl__types_8h_1a665a90816ae3328f517ba19c70e4b172" kindref="member">DPCTLSyclProgramRef</ref></type>
        <definition>DPCTL_API __dpctl_give DPCTLSyclProgramRef DPCTLProgram_CreateFromOCLSource</definition>
        <argsstring>(__dpctl_keep const DPCTLSyclContextRef Ctx, __dpctl_keep const char *Source, __dpctl_keep const char *CompileOpts)</argsstring>
        <name>DPCTLProgram_CreateFromOCLSource</name>
        <param>
          <type>__dpctl_keep const <ref refid="df/d57/dpctl__sycl__types_8h_1accf78808322af80b73da617cb2f15f08" kindref="member">DPCTLSyclContextRef</ref></type>
          <declname>Ctx</declname>
        </param>
        <param>
          <type>__dpctl_keep const char *</type>
          <declname>Source</declname>
        </param>
        <param>
          <type>__dpctl_keep const char *</type>
          <declname>CompileOpts</declname>
        </param>
        <briefdescription>
<para>Create a Sycl program from an OpenCL kernel source string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>An opaque pointer to a sycl::context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Source</parametername>
</parameternamelist>
<parameterdescription>
<para>OpenCL source string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>CompileOpts</parametername>
</parameternamelist>
<parameterdescription>
<para>Extra compiler flags (refer Sycl spec.) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new SyclProgramRef pointer if the program creation succeeded, else returns NULL. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/dpctl/dpctl/libsyclinterface/include/dpctl_sycl_program_interface.h" line="81" column="1" declfile="/home/runner/work/dpctl/dpctl/libsyclinterface/include/dpctl_sycl_program_interface.h" declline="81" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d1/dbb/group___program_interface_1gade20300fcd7d69bdb6ae7cad54ee0f78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DPCTL_API __dpctl_give <ref refid="df/d57/dpctl__sycl__types_8h_1a665a90816ae3328f517ba19c70e4b172" kindref="member">DPCTLSyclProgramRef</ref></type>
        <definition>DPCTL_API __dpctl_give DPCTLSyclProgramRef DPCTLProgram_CreateFromSpirv</definition>
        <argsstring>(__dpctl_keep const DPCTLSyclContextRef Ctx, __dpctl_keep const void *IL, size_t Length, const char *CompileOpts)</argsstring>
        <name>DPCTLProgram_CreateFromSpirv</name>
        <param>
          <type>__dpctl_keep const <ref refid="df/d57/dpctl__sycl__types_8h_1accf78808322af80b73da617cb2f15f08" kindref="member">DPCTLSyclContextRef</ref></type>
          <declname>Ctx</declname>
        </param>
        <param>
          <type>__dpctl_keep const void *</type>
          <declname>IL</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>Length</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>CompileOpts</declname>
        </param>
        <briefdescription>
<para>Create a Sycl program from an OpenCL SPIR-V binary file. </para>
        </briefdescription>
        <detaileddescription>
<para>Sycl 1.2 does not expose any method to create a sycl::program from a SPIR-V IL file. To get around this limitation, we first creare a SYCL interoperability program and then create a SYCL program from the interoperability program. Currently, interoperability programs can be created for OpenCL and Level-0 backends.</para>
<para>The feature to create a Sycl kernel from a SPIR-V IL binary will be available in Sycl 2.0 at which point this function may become deprecated.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>An opaque pointer to a sycl::context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IL</parametername>
</parameternamelist>
<parameterdescription>
<para>SPIR-V binary </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Length</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the IL binary in bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>CompileOpts</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional compiler flags used when compiling the SPIR-V binary. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new SyclProgramRef pointer if the program creation succeeded, else returns NULL. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/dpctl/dpctl/libsyclinterface/include/dpctl_sycl_program_interface.h" line="64" column="1" declfile="/home/runner/work/dpctl/dpctl/libsyclinterface/include/dpctl_sycl_program_interface.h" declline="64" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d1/dbb/group___program_interface_1ga29760f4984675c264bbdf11b92b89c08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DPCTL_API void</type>
        <definition>DPCTL_API void DPCTLProgram_Delete</definition>
        <argsstring>(__dpctl_take DPCTLSyclProgramRef PRef)</argsstring>
        <name>DPCTLProgram_Delete</name>
        <param>
          <type>__dpctl_take <ref refid="df/d57/dpctl__sycl__types_8h_1a665a90816ae3328f517ba19c70e4b172" kindref="member">DPCTLSyclProgramRef</ref></type>
          <declname>PRef</declname>
        </param>
        <briefdescription>
<para>Frees the DPCTLSyclProgramRef pointer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>PRef</parametername>
</parameternamelist>
<parameterdescription>
<para>Opaque pointer to a sycl::program </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/dpctl/dpctl/libsyclinterface/include/dpctl_sycl_program_interface.h" line="119" column="6" declfile="/home/runner/work/dpctl/dpctl/libsyclinterface/include/dpctl_sycl_program_interface.h" declline="119" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d1/dbb/group___program_interface_1ga86fcd9c7af5bc38a056e237c89b3fa9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DPCTL_API __dpctl_give <ref refid="df/d57/dpctl__sycl__types_8h_1a3f6be07fdf695c015719ce0b0c237844" kindref="member">DPCTLSyclKernelRef</ref></type>
        <definition>DPCTL_API __dpctl_give DPCTLSyclKernelRef DPCTLProgram_GetKernel</definition>
        <argsstring>(__dpctl_keep DPCTLSyclProgramRef PRef, __dpctl_keep const char *KernelName)</argsstring>
        <name>DPCTLProgram_GetKernel</name>
        <param>
          <type>__dpctl_keep <ref refid="df/d57/dpctl__sycl__types_8h_1a665a90816ae3328f517ba19c70e4b172" kindref="member">DPCTLSyclProgramRef</ref></type>
          <declname>PRef</declname>
        </param>
        <param>
          <type>__dpctl_keep const char *</type>
          <declname>KernelName</declname>
        </param>
        <briefdescription>
<para>Returns the SyclKernel with given name from the program, if not found then return NULL. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>PRef</parametername>
</parameternamelist>
<parameterdescription>
<para>Opaque pointer to a sycl::program </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>KernelName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of kernel </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A SyclKernel reference if the kernel exists, else NULL </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/dpctl/dpctl/libsyclinterface/include/dpctl_sycl_program_interface.h" line="96" column="1" declfile="/home/runner/work/dpctl/dpctl/libsyclinterface/include/dpctl_sycl_program_interface.h" declline="96" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="d1/dbb/group___program_interface_1ga9c266676f09dd0ed681adfe2d6b1ff06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DPCTL_API bool</type>
        <definition>DPCTL_API bool DPCTLProgram_HasKernel</definition>
        <argsstring>(__dpctl_keep DPCTLSyclProgramRef PRef, __dpctl_keep const char *KernelName)</argsstring>
        <name>DPCTLProgram_HasKernel</name>
        <param>
          <type>__dpctl_keep <ref refid="df/d57/dpctl__sycl__types_8h_1a665a90816ae3328f517ba19c70e4b172" kindref="member">DPCTLSyclProgramRef</ref></type>
          <declname>PRef</declname>
        </param>
        <param>
          <type>__dpctl_keep const char *</type>
          <declname>KernelName</declname>
        </param>
        <briefdescription>
<para>Return True if a SyclKernel with given name exists in the program, if not found then returns False. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>PRef</parametername>
</parameternamelist>
<parameterdescription>
<para>Opaque pointer to a sycl::program </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>KernelName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of kernel </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the kernel exists, else False </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/dpctl/dpctl/libsyclinterface/include/dpctl_sycl_program_interface.h" line="109" column="6" declfile="/home/runner/work/dpctl/dpctl/libsyclinterface/include/dpctl_sycl_program_interface.h" declline="109" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This header declares a C API to create Sycl interoperability programs for OpenCL and Level Zero driver API. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//===-<sp/>dpctl_sycl_program_interface.h<sp/>-<sp/>C<sp/>API<sp/>for<sp/>sycl::program<sp/><sp/>-*-C++-*-<sp/>===//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Data<sp/>Parallel<sp/>Control<sp/>(dpctl)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2020-2021<sp/>Intel<sp/>Corporation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//===----------------------------------------------------------------------===//</highlight></codeline>
<codeline lineno="25"><highlight class="comment"></highlight><highlight class="comment">//===----------------------------------------------------------------------===//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Support/DllExport.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Support/ExternC.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Support/MemOwnershipAttrs.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dpctl_data_types.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="df/d57/dpctl__sycl__types_8h" kindref="compound">dpctl_sycl_types.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal">DPCTL_C_EXTERN_C_BEGIN</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal">DPCTL_API</highlight></codeline>
<codeline lineno="63"><highlight class="normal">__dpctl_give<sp/><ref refid="df/d57/dpctl__sycl__types_8h_1a665a90816ae3328f517ba19c70e4b172" kindref="member">DPCTLSyclProgramRef</ref></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><ref refid="d1/dbb/group___program_interface_1gade20300fcd7d69bdb6ae7cad54ee0f78" kindref="member">DPCTLProgram_CreateFromSpirv</ref>(__dpctl_keep<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="df/d57/dpctl__sycl__types_8h_1accf78808322af80b73da617cb2f15f08" kindref="member">DPCTLSyclContextRef</ref><sp/>Ctx,</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__dpctl_keep<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*IL,</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Length,</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*CompileOpts);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal">DPCTL_API</highlight></codeline>
<codeline lineno="80"><highlight class="normal">__dpctl_give<sp/><ref refid="df/d57/dpctl__sycl__types_8h_1a665a90816ae3328f517ba19c70e4b172" kindref="member">DPCTLSyclProgramRef</ref></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><ref refid="d1/dbb/group___program_interface_1gae1f8caf6c9bb8d8683b3717f63e56ae7" kindref="member">DPCTLProgram_CreateFromOCLSource</ref>(__dpctl_keep<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="df/d57/dpctl__sycl__types_8h_1accf78808322af80b73da617cb2f15f08" kindref="member">DPCTLSyclContextRef</ref><sp/>Ctx,</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__dpctl_keep<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Source,</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__dpctl_keep<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*CompileOpts);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal">DPCTL_API</highlight></codeline>
<codeline lineno="95"><highlight class="normal">__dpctl_give<sp/><ref refid="df/d57/dpctl__sycl__types_8h_1a3f6be07fdf695c015719ce0b0c237844" kindref="member">DPCTLSyclKernelRef</ref></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><ref refid="d1/dbb/group___program_interface_1ga86fcd9c7af5bc38a056e237c89b3fa9c" kindref="member">DPCTLProgram_GetKernel</ref>(__dpctl_keep<sp/><ref refid="df/d57/dpctl__sycl__types_8h_1a665a90816ae3328f517ba19c70e4b172" kindref="member">DPCTLSyclProgramRef</ref><sp/>PRef,</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__dpctl_keep<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*KernelName);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal">DPCTL_API</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d1/dbb/group___program_interface_1ga9c266676f09dd0ed681adfe2d6b1ff06" kindref="member">DPCTLProgram_HasKernel</ref>(__dpctl_keep<sp/><ref refid="df/d57/dpctl__sycl__types_8h_1a665a90816ae3328f517ba19c70e4b172" kindref="member">DPCTLSyclProgramRef</ref><sp/>PRef,</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__dpctl_keep<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*KernelName);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal">DPCTL_API</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d1/dbb/group___program_interface_1ga29760f4984675c264bbdf11b92b89c08" kindref="member">DPCTLProgram_Delete</ref>(__dpctl_take<sp/><ref refid="df/d57/dpctl__sycl__types_8h_1a665a90816ae3328f517ba19c70e4b172" kindref="member">DPCTLSyclProgramRef</ref><sp/>PRef);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal">DPCTL_C_EXTERN_C_END</highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/dpctl/dpctl/libsyclinterface/include/dpctl_sycl_program_interface.h"/>
  </compounddef>
</doxygen>
