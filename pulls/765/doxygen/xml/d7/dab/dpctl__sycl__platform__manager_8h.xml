<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="d7/dab/dpctl__sycl__platform__manager_8h" kind="file" language="C++">
    <compoundname>dpctl_sycl_platform_manager.h</compoundname>
    <includes local="yes">Support/DllExport.h</includes>
    <includes local="yes">Support/ExternC.h</includes>
    <includes local="yes">Support/MemOwnershipAttrs.h</includes>
    <includes refid="df/d57/dpctl__sycl__types_8h" local="yes">dpctl_sycl_types.h</includes>
    <includes local="yes">dpctl_vector.h</includes>
    <includedby refid="d3/d02/dpctl__sycl__platform__interface_8h" local="yes">dpctl_sycl_platform_interface.h</includedby>
    <incdepgraph>
      <node id="4">
        <label>Support/MemOwnershipAttrs.h</label>
      </node>
      <node id="2">
        <label>Support/DllExport.h</label>
      </node>
      <node id="5">
        <label>dpctl_sycl_types.h</label>
        <link refid="df/d57/dpctl__sycl__types_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>Support/ExternC.h</label>
      </node>
      <node id="1">
        <label>dpctl_sycl_platform_manager.h</label>
        <link refid="d7/dab/dpctl__sycl__platform__manager_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>dpctl_vector.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>dpctl_sycl_platform_interface.h</label>
        <link refid="d3/d02/dpctl__sycl__platform__interface_8h"/>
      </node>
      <node id="1">
        <label>dpctl_sycl_platform_manager.h</label>
        <link refid="d7/dab/dpctl__sycl__platform__manager_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="d5/dcf/group___platform_manager_1ga18dc8588af45614eb2f4a9f7b25a6047" prot="public" static="no">
        <type>struct DPCTLPlatformVector *</type>
        <definition>typedef struct DPCTLPlatformVector* DPCTLPlatformVectorRef</definition>
        <argsstring></argsstring>
        <name>DPCTLPlatformVectorRef</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/dpctl/dpctl/libsyclinterface/include/dpctl_sycl_platform_manager.h" line="44" column="34" bodyfile="/home/runner/work/dpctl/dpctl/libsyclinterface/include/dpctl_sycl_platform_manager.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="d5/dcf/group___platform_manager_1ga8e44adac75e0ecf8705b089404a8fb86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DPCTL_API void</type>
        <definition>DPCTL_API void DPCTLPlatformMgr_PrintInfo</definition>
        <argsstring>(__dpctl_keep const DPCTLSyclPlatformRef PRef, size_t verbosity)</argsstring>
        <name>DPCTLPlatformMgr_PrintInfo</name>
        <param>
          <type>__dpctl_keep const <ref refid="df/d57/dpctl__sycl__types_8h_1aae750289dcff2c3739f4870086ac7ed0" kindref="member">DPCTLSyclPlatformRef</ref></type>
          <declname>PRef</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>verbosity</declname>
        </param>
        <briefdescription>
<para>Prints out information about the sycl::platform argument. </para>
        </briefdescription>
        <detaileddescription>
<para>The helper function is used to print metadata about a given platform. The amount of information printed out is controlled by the verbosity level.</para>
<para>Verbosity level 0: Prints only the name of the platform. Verbosity level 1: Prints the name, version, vendor, backend, number of devices in the platform. Verbosity level 2: Prints everything in level 1 and also prints the name, version, and filter string for each device in the platform.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>PRef</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="df/d57/dpctl__sycl__types_8h_1aae750289dcff2c3739f4870086ac7ed0" kindref="member">DPCTLSyclPlatformRef</ref> opaque pointer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>verbosity</parametername>
</parameternamelist>
<parameterdescription>
<para>Verbosilty level to control how much information is printed out. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/dpctl/dpctl/libsyclinterface/include/dpctl_sycl_platform_manager.h" line="64" column="6" declfile="/home/runner/work/dpctl/dpctl/libsyclinterface/include/dpctl_sycl_platform_manager.h" declline="64" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d5/dcf/group___platform_manager_1ga89b9b23802931f2354d8acb91f72ba6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DPCTL_API void</type>
        <definition>DPCTL_API void DPCTLPlatformVector_Clear</definition>
        <argsstring>(__dpctl_keep DPCTLPlatformVectorRef VRef)</argsstring>
        <name>DPCTLPlatformVector_Clear</name>
        <param>
          <type>__dpctl_keep <ref refid="d5/dcf/group___platform_manager_1ga18dc8588af45614eb2f4a9f7b25a6047" kindref="member">DPCTLPlatformVectorRef</ref></type>
          <declname>VRef</declname>
        </param>
        <briefdescription>
<para>Delete all the elements of the std::vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>VRef</parametername>
</parameternamelist>
<parameterdescription>
<para>Opaque pointer to a vector. <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/dpctl/dpctl/libsyclinterface/include/dpctl_sycl_platform_manager.h" line="44" column="301" declfile="/home/runner/work/dpctl/dpctl/libsyclinterface/include/dpctl_sycl_platform_manager.h" declline="44" declcolumn="301"/>
      </memberdef>
      <memberdef kind="function" id="d5/dcf/group___platform_manager_1ga9d5773827c527bc445bf60ffbf6a6e60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__dpctl_give <ref refid="d5/dcf/group___platform_manager_1ga18dc8588af45614eb2f4a9f7b25a6047" kindref="member">DPCTLPlatformVectorRef</ref></type>
        <definition>__dpctl_give DPCTLPlatformVectorRef DPCTLPlatformVector_Create</definition>
        <argsstring>(void)</argsstring>
        <name>DPCTLPlatformVector_Create</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Create an opaque pointer to a std::vector of opaque pointers wrapping the SYCL data type. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Returns a new opaque pointer to a vector. <linebreak/>
 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/dpctl/dpctl/libsyclinterface/include/dpctl_sycl_platform_manager.h" line="44" column="103" declfile="/home/runner/work/dpctl/dpctl/libsyclinterface/include/dpctl_sycl_platform_manager.h" declline="44" declcolumn="103"/>
      </memberdef>
      <memberdef kind="function" id="d5/dcf/group___platform_manager_1gac4e4722d083773b839113fb32cca632c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DPCTL_API __dpctl_give <ref refid="d5/dcf/group___platform_manager_1ga18dc8588af45614eb2f4a9f7b25a6047" kindref="member">DPCTLPlatformVectorRef</ref></type>
        <definition>DPCTL_API __dpctl_give DPCTLPlatformVectorRef DPCTLPlatformVector_CreateFromArray</definition>
        <argsstring>(size_t len, __dpctl_keep DPCTLSyclPlatformRef *elems)</argsstring>
        <name>DPCTLPlatformVector_CreateFromArray</name>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>__dpctl_keep <ref refid="df/d57/dpctl__sycl__types_8h_1aae750289dcff2c3739f4870086ac7ed0" kindref="member">DPCTLSyclPlatformRef</ref> *</type>
          <declname>elems</declname>
        </param>
        <briefdescription>
<para>Create an opaque pointer to a std::vector created from the input raw array. The elements of the input array are deep copied before inserting the copies into the vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of elements in the input array.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elems</parametername>
</parameternamelist>
<parameterdescription>
<para>A C array whose elements will be copied into the returned vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns a new opaque pointer to a vector. <linebreak/>
 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/dpctl/dpctl/libsyclinterface/include/dpctl_sycl_platform_manager.h" line="44" column="183" declfile="/home/runner/work/dpctl/dpctl/libsyclinterface/include/dpctl_sycl_platform_manager.h" declline="44" declcolumn="183"/>
      </memberdef>
      <memberdef kind="function" id="d5/dcf/group___platform_manager_1gaef25f3448c038f7a8ac3dd99a3d69249" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DPCTL_API void</type>
        <definition>DPCTL_API void DPCTLPlatformVector_Delete</definition>
        <argsstring>(__dpctl_take DPCTLPlatformVectorRef VRef)</argsstring>
        <name>DPCTLPlatformVector_Delete</name>
        <param>
          <type>__dpctl_take <ref refid="d5/dcf/group___platform_manager_1ga18dc8588af45614eb2f4a9f7b25a6047" kindref="member">DPCTLPlatformVectorRef</ref></type>
          <declname>VRef</declname>
        </param>
        <briefdescription>
<para>Delete all elements in the vector and then delete the vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>VRef</parametername>
</parameternamelist>
<parameterdescription>
<para>Opaque pointer to a vector to be deleted. <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/dpctl/dpctl/libsyclinterface/include/dpctl_sycl_platform_manager.h" line="44" column="250" declfile="/home/runner/work/dpctl/dpctl/libsyclinterface/include/dpctl_sycl_platform_manager.h" declline="44" declcolumn="250"/>
      </memberdef>
      <memberdef kind="function" id="d5/dcf/group___platform_manager_1ga131427438ea4f1cbca1fe4c93e11e21a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DPCTL_API __dpctl_give <ref refid="df/d57/dpctl__sycl__types_8h_1aae750289dcff2c3739f4870086ac7ed0" kindref="member">DPCTLSyclPlatformRef</ref></type>
        <definition>DPCTL_API __dpctl_give DPCTLSyclPlatformRef DPCTLPlatformVector_GetAt</definition>
        <argsstring>(__dpctl_keep DPCTLPlatformVectorRef VRef, size_t index)</argsstring>
        <name>DPCTLPlatformVector_GetAt</name>
        <param>
          <type>__dpctl_keep <ref refid="d5/dcf/group___platform_manager_1ga18dc8588af45614eb2f4a9f7b25a6047" kindref="member">DPCTLPlatformVectorRef</ref></type>
          <declname>VRef</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Returns the element at the specified index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>VRef</parametername>
</parameternamelist>
<parameterdescription>
<para>Opaque pointer to a vector.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index postion of the element to be returned. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The element at the specified postion, if the index position is out of bounds then a nullptr is returned. <linebreak/>
 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/dpctl/dpctl/libsyclinterface/include/dpctl_sycl_platform_manager.h" line="44" column="431" declfile="/home/runner/work/dpctl/dpctl/libsyclinterface/include/dpctl_sycl_platform_manager.h" declline="44" declcolumn="431"/>
      </memberdef>
      <memberdef kind="function" id="d5/dcf/group___platform_manager_1ga713c99c0d385de070ae32d4d7657401e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DPCTL_API size_t</type>
        <definition>DPCTL_API size_t DPCTLPlatformVector_Size</definition>
        <argsstring>(__dpctl_keep DPCTLPlatformVectorRef VRef)</argsstring>
        <name>DPCTLPlatformVector_Size</name>
        <param>
          <type>__dpctl_keep <ref refid="d5/dcf/group___platform_manager_1ga18dc8588af45614eb2f4a9f7b25a6047" kindref="member">DPCTLPlatformVectorRef</ref></type>
          <declname>VRef</declname>
        </param>
        <briefdescription>
<para>Returns the number of elements in the vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>VRef</parametername>
</parameternamelist>
<parameterdescription>
<para>Opaque pointer to a vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The current size of the vector. <linebreak/>
 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/dpctl/dpctl/libsyclinterface/include/dpctl_sycl_platform_manager.h" line="44" column="353" declfile="/home/runner/work/dpctl/dpctl/libsyclinterface/include/dpctl_sycl_platform_manager.h" declline="44" declcolumn="353"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This header declares helper functions to work with sycl::platform objects. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//===--<sp/>dpctl_sycl_platform_manager.h<sp/>-<sp/>Helpers<sp/>for<sp/>sycl::platform<sp/>-*-C++-*-<sp/>=//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Data<sp/>Parallel<sp/>Control<sp/>(dpctl)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2020-2021<sp/>Intel<sp/>Corporation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//===----------------------------------------------------------------------===//</highlight></codeline>
<codeline lineno="24"><highlight class="comment"></highlight><highlight class="comment">//===----------------------------------------------------------------------===//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Support/DllExport.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Support/ExternC.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Support/MemOwnershipAttrs.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="df/d57/dpctl__sycl__types_8h" kindref="compound">dpctl_sycl_types.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dpctl_vector.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal">DPCTL_C_EXTERN_C_BEGIN</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="comment">//<sp/>Declares<sp/>a<sp/>set<sp/>of<sp/>types<sp/>abd<sp/>functions<sp/>to<sp/>deal<sp/>with<sp/>vectors<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DPCTLSyclPlatformRef.<sp/>Refer<sp/>dpctl_vector_macros.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="d5/dcf/group___platform_manager_1ga18dc8588af45614eb2f4a9f7b25a6047" refkind="member"><highlight class="normal">DPCTL_DECLARE_VECTOR(Platform)</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal">DPCTL_API</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d5/dcf/group___platform_manager_1ga8e44adac75e0ecf8705b089404a8fb86" kindref="member">DPCTLPlatformMgr_PrintInfo</ref>(__dpctl_keep<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="df/d57/dpctl__sycl__types_8h_1aae750289dcff2c3739f4870086ac7ed0" kindref="member">DPCTLSyclPlatformRef</ref><sp/>PRef,</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>verbosity);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal">DPCTL_C_EXTERN_C_END</highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/dpctl/dpctl/libsyclinterface/include/dpctl_sycl_platform_manager.h"/>
  </compounddef>
</doxygen>
