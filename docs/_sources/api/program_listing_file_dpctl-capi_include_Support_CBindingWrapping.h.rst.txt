
.. _program_listing_file_dpctl-capi_include_Support_CBindingWrapping.h:

Program Listing for File CBindingWrapping.h
===========================================

|exhale_lsh| :ref:`Return to documentation for file <file_dpctl-capi_include_Support_CBindingWrapping.h>` (``dpctl-capi/include/Support/CBindingWrapping.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   //===---- Support/CBindingWrapping.h - DPCTL-SYCL interface --*-- C ---*---===//
   //
   //               Data Parallel Control Library (dpCtl)
   //
   // Copyright 2020 Intel Corporation
   //
   // Licensed under the Apache License, Version 2.0 (the "License");
   // you may not use this file except in compliance with the License.
   // You may obtain a copy of the License at
   //
   //    http://www.apache.org/licenses/LICENSE-2.0
   //
   // Unless required by applicable law or agreed to in writing, software
   // distributed under the License is distributed on an "AS IS" BASIS,
   // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   // See the License for the specific language governing permissions and
   // limitations under the License.
   //
   //===----------------------------------------------------------------------===//
   //===----------------------------------------------------------------------===//
   
   #pragma once
   
   #define DEFINE_SIMPLE_CONVERSION_FUNCTIONS(ty, ref)                            \
       __attribute__((unused)) inline ty *unwrap(ref P)                           \
       {                                                                          \
           return reinterpret_cast<ty*>(P);                                       \
       }                                                                          \
                                                                                  \
       __attribute__((unused)) inline ref wrap(const ty *P)                       \
       {                                                                          \
               return reinterpret_cast<ref>(const_cast<ty*>(P));                  \
       }
   
   #define DEFINE_STDCXX_CONVERSION_FUNCTIONS(ty, ref)                            \
       DEFINE_SIMPLE_CONVERSION_FUNCTIONS(ty, ref)                                \
                                                                                  \
       template<typename T>                                                       \
       __attribute__((unused)) inline T *unwrap(ref P)                            \
       {                                                                          \
           T *Q = (T*)unwrap(P);                                                  \
           assert(Q && "Invalid cast!");                                          \
           return Q;                                                              \
       }
