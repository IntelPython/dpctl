
.. _program_listing_file_dpctl-capi_include_dpctl_sycl_queue_interface.h:

Program Listing for File dpctl_sycl_queue_interface.h
=====================================================

|exhale_lsh| :ref:`Return to documentation for file <file_dpctl-capi_include_dpctl_sycl_queue_interface.h>` (``dpctl-capi/include/dpctl_sycl_queue_interface.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   //===---------- dpctl_sycl_queue_interface.h - dpctl-C_API ---*---C++ -*---===//
   //
   //               Data Parallel Control Library (dpCtl)
   //
   // Copyright 2020 Intel Corporation
   //
   // Licensed under the Apache License, Version 2.0 (the "License");
   // you may not use this file except in compliance with the License.
   // You may obtain a copy of the License at
   //
   //    http://www.apache.org/licenses/LICENSE-2.0
   //
   // Unless required by applicable law or agreed to in writing, software
   // distributed under the License is distributed on an "AS IS" BASIS,
   // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   // See the License for the specific language governing permissions and
   // limitations under the License.
   //
   //===----------------------------------------------------------------------===//
   //===----------------------------------------------------------------------===//
   
   #pragma once
   
   #include "dpctl_data_types.h"
   #include "dpctl_sycl_enum_types.h"
   #include "dpctl_sycl_types.h"
   #include "Support/DllExport.h"
   #include "Support/ExternC.h"
   #include "Support/MemOwnershipAttrs.h"
   
   DPCTL_C_EXTERN_C_BEGIN
   
   DPCTL_API
   void DPCTLQueue_Delete (__dpctl_take DPCTLSyclQueueRef QRef);
   
   DPCTL_API
   bool DPCTLQueue_AreEq (__dpctl_keep const DPCTLSyclQueueRef QRef1,
                          __dpctl_keep const DPCTLSyclQueueRef QRef2);
   
   DPCTL_API
   DPCTLSyclBackendType DPCTLQueue_GetBackend (__dpctl_keep DPCTLSyclQueueRef QRef);
   
   DPCTL_API
   __dpctl_give DPCTLSyclContextRef
   DPCTLQueue_GetContext (__dpctl_keep const DPCTLSyclQueueRef QRef);
   
   DPCTL_API
   __dpctl_give DPCTLSyclDeviceRef
   DPCTLQueue_GetDevice (__dpctl_keep const DPCTLSyclQueueRef QRef);
   
   DPCTL_API
   DPCTLSyclEventRef
   DPCTLQueue_SubmitRange (__dpctl_keep const DPCTLSyclKernelRef KRef,
                           __dpctl_keep const DPCTLSyclQueueRef QRef,
                           __dpctl_keep void **Args,
                           __dpctl_keep const DPCTLKernelArgType *ArgTypes,
                           size_t NArgs,
                           __dpctl_keep const size_t Range[3],
                           size_t NRange,
                           __dpctl_keep const DPCTLSyclEventRef *DepEvents,
                           size_t NDepEvents);
   
   DPCTL_API
   DPCTLSyclEventRef
   DPCTLQueue_SubmitNDRange(__dpctl_keep const DPCTLSyclKernelRef KRef,
                            __dpctl_keep const DPCTLSyclQueueRef QRef,
                            __dpctl_keep void **Args,
                            __dpctl_keep const DPCTLKernelArgType *ArgTypes,
                            size_t NArgs,
                            __dpctl_keep const size_t gRange[3],
                            __dpctl_keep const size_t lRange[3],
                            size_t NDims,
                            __dpctl_keep const DPCTLSyclEventRef *DepEvents,
                            size_t NDepEvents);
   
   DPCTL_API
   void
   DPCTLQueue_Wait (__dpctl_keep const DPCTLSyclQueueRef QRef);
   
   DPCTL_API
   void DPCTLQueue_Memcpy (__dpctl_keep const DPCTLSyclQueueRef QRef,
                           void *Dest, const void *Src, size_t Count);
   
   DPCTL_API
   void DPCTLQueue_Prefetch (__dpctl_keep DPCTLSyclQueueRef QRef,
                             const void *Ptr, size_t Count);
   
   DPCTL_API
   void DPCTLQueue_MemAdvise (__dpctl_keep DPCTLSyclQueueRef QRef,
                              const void *Ptr, size_t Count, int Advice);
   
   DPCTL_C_EXTERN_C_END
