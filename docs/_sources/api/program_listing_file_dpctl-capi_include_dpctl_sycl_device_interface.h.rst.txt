
.. _program_listing_file_dpctl-capi_include_dpctl_sycl_device_interface.h:

Program Listing for File dpctl_sycl_device_interface.h
======================================================

|exhale_lsh| :ref:`Return to documentation for file <file_dpctl-capi_include_dpctl_sycl_device_interface.h>` (``dpctl-capi/include/dpctl_sycl_device_interface.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   //===--------- dpctl_sycl_device_interface.h - dpctl-C_API ---*---C++ -*---===//
   //
   //               Data Parallel Control Library (dpCtl)
   //
   // Copyright 2020 Intel Corporation
   //
   // Licensed under the Apache License, Version 2.0 (the "License");
   // you may not use this file except in compliance with the License.
   // You may obtain a copy of the License at
   //
   //    http://www.apache.org/licenses/LICENSE-2.0
   //
   // Unless required by applicable law or agreed to in writing, software
   // distributed under the License is distributed on an "AS IS" BASIS,
   // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   // See the License for the specific language governing permissions and
   // limitations under the License.
   //
   //===----------------------------------------------------------------------===//
   //===----------------------------------------------------------------------===//
   
   #pragma once
   
   #include "dpctl_data_types.h"
   #include "dpctl_sycl_enum_types.h"
   #include "dpctl_sycl_types.h"
   #include "Support/DllExport.h"
   #include "Support/ExternC.h"
   #include "Support/MemOwnershipAttrs.h"
   
   DPCTL_C_EXTERN_C_BEGIN
   
   DPCTL_API
   void DPCTLDevice_DumpInfo (__dpctl_keep const DPCTLSyclDeviceRef DRef);
   
   DPCTL_API
   void DPCTLDevice_Delete (__dpctl_take DPCTLSyclDeviceRef DRef);
   
   DPCTL_API
   bool DPCTLDevice_IsAccelerator (__dpctl_keep const DPCTLSyclDeviceRef DRef);
   
   DPCTL_API
   bool DPCTLDevice_IsCPU (__dpctl_keep const DPCTLSyclDeviceRef DRef);
   
   DPCTL_API
   bool DPCTLDevice_IsGPU (__dpctl_keep const DPCTLSyclDeviceRef DRef);
   
   DPCTL_API
   bool DPCTLDevice_IsHost (__dpctl_keep const DPCTLSyclDeviceRef DRef);
   
   DPCTL_API
   __dpctl_give const char*
   DPCTLDevice_GetDriverInfo (__dpctl_keep const DPCTLSyclDeviceRef DRef);
   
   DPCTL_API
   uint32_t
   DPCTLDevice_GetMaxComputeUnits (__dpctl_keep const DPCTLSyclDeviceRef DRef);
   
   DPCTL_API
   uint32_t
   DPCTLDevice_GetMaxWorkItemDims (__dpctl_keep const DPCTLSyclDeviceRef DRef);
   
   DPCTL_API
   __dpctl_keep size_t*
   DPCTLDevice_GetMaxWorkItemSizes (__dpctl_keep const DPCTLSyclDeviceRef DRef);
   
   DPCTL_API
   size_t
   DPCTLDevice_GetMaxWorkGroupSize (__dpctl_keep const DPCTLSyclDeviceRef DRef);
   
   DPCTL_API
   uint32_t
   DPCTLDevice_GetMaxNumSubGroups (__dpctl_keep const DPCTLSyclDeviceRef DRef);
   
   DPCTL_API
   bool
   DPCTLDevice_HasInt64BaseAtomics (__dpctl_keep const DPCTLSyclDeviceRef DRef);
   
   DPCTL_API
   bool
   DPCTLDevice_HasInt64ExtendedAtomics (__dpctl_keep const DPCTLSyclDeviceRef DRef);
   
   DPCTL_API
   __dpctl_give const char*
   DPCTLDevice_GetName (__dpctl_keep const DPCTLSyclDeviceRef DRef);
   
   DPCTL_API
   __dpctl_give const char*
   DPCTLDevice_GetVendorName (__dpctl_keep const DPCTLSyclDeviceRef DRef);
   
   DPCTL_API
   bool DPCTLDevice_IsHostUnifiedMemory (__dpctl_keep const DPCTLSyclDeviceRef DRef);
   
   DPCTL_API
   bool DPCTLDevice_AreEq (__dpctl_keep const DPCTLSyclDeviceRef DevRef1,
                           __dpctl_keep const DPCTLSyclDeviceRef DevRef2);
   DPCTL_C_EXTERN_C_END
