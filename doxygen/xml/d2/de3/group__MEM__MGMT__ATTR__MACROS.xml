<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="d2/de3/group__MEM__MGMT__ATTR__MACROS" kind="group">
    <compoundname>MEM_MGMT_ATTR_MACROS</compoundname>
    <title>Memory management attributes.</title>
      <sectiondef kind="define">
      <memberdef kind="define" id="d2/de3/group__MEM__MGMT__ATTR__MACROS_1ga836492a42cdfef6419378dbf8d81f452" prot="public" static="no">
        <name>__dpctl_give</name>
        <briefdescription>
<para>The __dpctl_give attribute indicates that a new object is returned and the caller now owns the object. </para>
        </briefdescription>
        <detaileddescription>
<para>The __dpctl_give attribute informs a user that the function is allocating a new object and returning it to the user. The user now owns the object and to free the object, he/she should make sure to use it exactly once as a value for a __dpctl_take argument. However, the user is free to use the object as he/she likes as a value to __dpctl_keep arguments. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/localdisk/work/akharche/dpctl/dpctl-capi/include/Support/MemOwnershipAttrs.h" line="49" column="9" bodyfile="/localdisk/work/akharche/dpctl/dpctl-capi/include/Support/MemOwnershipAttrs.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d2/de3/group__MEM__MGMT__ATTR__MACROS_1gadd48a0161309931574aed2025a16ade7" prot="public" static="no">
        <name>__dpctl_keep</name>
        <briefdescription>
<para>The __dpctl_keep attribute indicates that the function only uses the object and does not destroy it before returning. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/localdisk/work/akharche/dpctl/dpctl-capi/include/Support/MemOwnershipAttrs.h" line="74" column="9" bodyfile="/localdisk/work/akharche/dpctl/dpctl-capi/include/Support/MemOwnershipAttrs.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d2/de3/group__MEM__MGMT__ATTR__MACROS_1ga8afac1975b8353a1bd54ac25b2572d04" prot="public" static="no">
        <name>__dpctl_null</name>
        <briefdescription>
<para>The __dpctl_null attribute indicates that a NULL value is returned. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/localdisk/work/akharche/dpctl/dpctl-capi/include/Support/MemOwnershipAttrs.h" line="82" column="9" bodyfile="/localdisk/work/akharche/dpctl/dpctl-capi/include/Support/MemOwnershipAttrs.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d2/de3/group__MEM__MGMT__ATTR__MACROS_1ga17fe5722d78d8ce138ca952889d07bc6" prot="public" static="no">
        <name>__dpctl_take</name>
        <briefdescription>
<para>The __dpctl_take attribute indicates that the function &quot;takes&quot; over the ownership of the object and the user must not use the object as an argument to another function. </para>
        </briefdescription>
        <detaileddescription>
<para>The __dpctl_take attribute mens that the function destroys it before the function returns, and the caller must not use the object again in any other function. If the pointer annotated with __dpctl_take is NULL then it is treated as an error, since it may prevent the normal behavior of the function. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/localdisk/work/akharche/dpctl/dpctl-capi/include/Support/MemOwnershipAttrs.h" line="65" column="9" bodyfile="/localdisk/work/akharche/dpctl/dpctl-capi/include/Support/MemOwnershipAttrs.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
